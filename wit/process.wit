package component:microkernel-process

interface types {
    type context = string

    variant inbound-message {
        request(inbound-request),
        response(inbound-payload),
    }

    record inbound-request {
        is-expecting-response: bool,
        payload: inbound-payload,
    }

    record inbound-payload {
        source: process-reference,
        json: option<string>,
        bytes: inbound-payload-bytes,
    }

    variant inbound-payload-bytes {
        none,            //  source gave us no bytes
        some(list<u8>),  //  source gave us bytes
        circumvented,    //  source cirucmvented bytes around us (attach to outbound
    }                    //   with outbound-payload-bytes::attach-circumvented)

    variant outbound-message {
        requests(list<joined-requests>),
        response(tuple<outbound-payload, context>),
        response-with-side-effect(response-with-side-effect),
    }

    type joined-requests = tuple<list<outbound-request>, context>

    record outbound-request {
        is-expecting-response: bool,
        target: process-reference,
        payload: outbound-payload,
    }

    record outbound-payload {
        json: option<string>,
        bytes: outbound-payload-bytes,
    }

    record response-with-side-effect {
        response: tuple<outbound-payload, context>,
        request: tuple<outbound-request, context>,
    }

    variant outbound-payload-bytes {
        none,                  //  target will not be given any bytes
        some(list<u8>),        //  target will be given bytes
        attach-circumvented,   //  target will be given bytes that were circumvented around us
        circumvent(list<u8>),  //  target will be be circumvented around with bytes
    }

    record process-address {
        node: string,
        id: u64,
        name: option<string>,
    }

    record process-reference {
        node: string,
        identifier: process-identifier,
    }

    variant process-identifier {
        id(u64),
        name(string),
    }

    record uqbar-error {
        source: process-reference,
        timestamp: u64,  //  unix time
        payload: uqbar-error-payload,
    }

    record uqbar-error-payload {
        kind: string,
        message: string,
        context: string,
    }
}

world microkernel-process {
    use types.{
        context,
        inbound-message,
        inbound-request,
        inbound-payload,
        inbound-payload-bytes,
        outbound-message,
        joined-requests,
        outbound-request,
        outbound-payload,
        response-with-side-effect,
        outbound-payload-bytes,
        process-address,
        process-reference,
        process-identifier,
        uqbar-error,
        uqbar-error-payload,
    }

    import receive: func() -> result<tuple<inbound-message, context>, uqbar-error>
    import send: func(message: result<outbound-message, uqbar-error-payload>)
    import send-and-await-receive: func(target: process-reference, payload: outbound-payload) -> result<inbound-message, uqbar-error>
    import print-to-terminal: func(verbosity: u8, message: string)
    import get-current-unix-time: func() -> u64
    import get-insecure-uniform-u64: func() -> u64
    export run-process: func(our: process-address)
}

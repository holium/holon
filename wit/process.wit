package component:microkernel-process

interface types {
    record wit-wire {
        source-ship: string,
        source-app:  string,
        target-ship: string,
        target-app:  string,
    }
    
    variant wit-payload {
        json(string),
        bytes(list<u8>),
    }

    enum wit-note {
        pass,
        give,
    }
    
    record wit-message {
        note: wit-note,
        wire: wit-wire,
        payload: wit-payload,
    }
}

world microkernel-process {
    use types.{wit-wire, wit-note, wit-payload, wit-message}

    import to-event-loop: func(target-ship: string, target-app: string, note: wit-note, payload: wit-payload)
    import modify-state: func(json-pointer: string, new-value: string) -> string
    import fetch-state: func(json-pointer: string) -> string
    import set-state: func(json: string) -> string
    import print-to-terminal: func(message: string)
    export init: func(source-ship: string, source-app: string)
    export run-write: func(message: wit-message)
    export run-take: func(message: wit-message)
    export run-read: func(message: wit-message) -> string
}
